class Solution {
    
    public int findDuplicate(int[] nums) {
        
        if(nums.length==0)
            return 0;
        int n = nums.length;
        
        int ans =0;
        for(int i=0;i<nums.length;i++){
            
            nums[nums[i]%n]+=n; 
        }
        
        for(int i=0;i<nums.length;i++){
            
            if(nums[i]/n>1)
                ans = i;
        }
        
        return ans;
    }
}

#include <bits/stdc++.h>
using namespace std;
int findDuplicate(int *nums, int n) {
    
    int slow = nums[0], fast = nums[0];
    do {
        slow = nums[slow];
        fast = nums[nums[fast]];
    } while (slow != fast);
        
    slow = nums[0];
    
    while (slow != fast) {
        slow = nums[slow];
        fast = nums[fast];
    }
    
    return fast;
}
int main() {
    
    int nums[] = {1, 3, 4, 4, 2};
    int n = sizeof(nums) / sizeof(nums[0]);
    cout<<findDuplicate(nums, n)<<endl;
    
    
    int nums2[] = {3, 1, 5, 4, 2, 5};
    n = sizeof(nums2) / sizeof(nums2[0]);
    cout<<findDuplicate(nums2, n);
    
    return 0;
}
