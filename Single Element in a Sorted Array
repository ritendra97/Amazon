class Solution {
    
    
    public int singleNonDuplicate(int[] nums) {
        if(nums.length == 0)
            return -1;
        if(nums.length == 1)
            return nums[0];
        
        return helper(nums, 0, nums.length - 1);
    }
    
    private int helper(int[] nums, int start, int end){
        if(start > end){
            return -1;
        }
        
        int mid = start + (end - start) / 2;
        
        if(mid == nums.length - 1){
            if(nums[mid] != nums[mid - 1]) return nums[mid];
        }else if(mid == 0){
            if(nums[mid] != nums[mid + 1]) return nums[mid];
        }else if(nums[mid] != nums[mid + 1] && nums[mid] != nums[mid - 1]) 
            return nums[mid];
        
        int left = helper(nums, start, mid - 1);
        
        if(left >= 0) 
            return left;
        
        int right = helper(nums, mid + 1, end);
        
        if(right >= 0) 
            return right;
        
        return -1;
    }
}
