import java.util.ArrayList;
import java.util.*;

//Fractional Knapsack Problem

public class Java {

	static class Node {

		int wt;
		int val;
		double valperwt;

		public Node(int wt, int val, double valperwt) {
			super();
			this.wt = wt;
			this.val = val;
			this.valperwt = valperwt;
		}
	}

	public static double getMaxValue(int[] wt, int[] val, int capacity) {
		
		if(capacity<=0)
			return 0;
		
		ArrayList<Node> arr = new ArrayList<>();
		
		for(int i=0;i<wt.length;i++) {
			arr.add(new Node(wt[i], val[i], val[i]/wt[i]));
		}
		
		
		Collections.sort(arr, new Comparator<Node>() {
			@Override
			public int compare(Node n1, Node n2) {
				
				if(n1.valperwt>n2.valperwt)
					return -1;
				else if(n1.valperwt<n2.valperwt) {
					return 1;
				}	
				return 0;
			}
		});
		
		
		double max_weight = 0;
		for(int i=0;i<arr.size();i++) {
			
			if(capacity<=0)
				break;
			
			if(capacity>=arr.get(i).wt) {
				max_weight+=arr.get(i).val;
				capacity = capacity-arr.get(i).wt;
			}else {
				max_weight+=capacity*arr.get(i).valperwt;
				capacity = capacity-arr.get(i).wt;
			}
		}
		
		return max_weight;
	}

	public static void main(String[] args) {

		int[] wt = { 30 };
		int[] val = { 500 };
		int capacity = 10;

		double maxValue = getMaxValue(wt, val, capacity);

		// Function call
		System.out.println("Maximum value we can obtain = " + maxValue);
	}
}
