static boolean levelOrderIsOfBST(int arr[], int n)
    {
        if (n == 0)
            return true;
        Queue<NodeDetails> q = new LinkedList<NodeDetails>();
        int i = 0;
        NodeDetails newNode=new NodeDetails();
        newNode.data = arr[i++];
        newNode.min = Integer.MIN_VALUE;
        newNode.max = Integer.MAX_VALUE;
        q.add(newNode);
        while (i != n && q.size() > 0)
        {
            NodeDetails temp = q.peek();
            q.remove();
            newNode = new NodeDetails();
            if (i < n && (arr[i] < (int)temp.data &&
                    arr[i] > (int)temp.min))
            {
                newNode.data = arr[i++];
                newNode.min = temp.min;
                newNode.max = temp.data;
                q.add(newNode);
            }

            newNode=new NodeDetails();
            if (i < n && (arr[i] > (int)temp.data &&
                    arr[i] < (int)temp.max))
            {
                newNode.data = arr[i++];
                newNode.min = temp.data;
                newNode.max = temp.max;
                q.add(newNode);
            }
        }

        if (i == n)
            return true;
        return false;
    }

// My Solution Both are same
public static Node constructTree(int arr[]){
        Queue<Node> q = new LinkedList<>();
        int index=0;
        Node root = new Node(arr[0]);
        q.add(root);
        while (!q.isEmpty()){
            Node node = q.remove();
            index++;
            if(index<arr.length){
                node.left = new Node(arr[index]);
                q.add(node.left);
            }
            index++;
            if(index<arr.length){
                node.right = new Node(arr[index]);
                q.add(node.right);
            }
        }

        return root;
    }

    public static boolean isBST(Node root, int min, int max){
        if(root==null) return true;
        if(min>=root.data || max<= root.data) return false;

        return isBST(root.left,min,root.data) && isBST(root.right,root.data,max);

    }
