//Minimum swaps required to bring all elements less than or equal to k together
// Brute Force 
//Maximum Binary Tree

import java.util.Arrays;
import java.util.HashMap;

public class Main4 {

    public static int Solution(int arr[], int k){
        int count = 0;
        for(int i = 0;i< arr.length;i++){
            if(arr[i]<=k) count++;
        }

        int min = Integer.MAX_VALUE;
        for(int i = 0;i< arr.length-k;i++){
            int badElement=0;
            for(int j = 0;j<k;j++){
                if(arr[i+j]>k){
                    badElement++;
                }
            }
            if(min>badElement){
                min = badElement;
            }
        }

        return min;
    }
    public static void main(String[] args){
        int arr[] = {2, 1, 5, 6, 3};
        int k = 3;
        System.out.println(Solution(arr,k));
    }
}

// Optimized Solution
//Maximum Binary Tree

import java.util.Arrays;
import java.util.HashMap;

public class Main4 {

    public static int Solution(int arr[], int k){
        int count = 0;
        for(int i = 0;i< arr.length;i++){
            if(arr[i]<=k) count++;
        }
        if(count==0) return 0;
        int min = Integer.MAX_VALUE;
        int badElement=0;
        int j = 0;
        for(int i = 0;i< arr.length;i++){
            if(arr[i]>k) badElement++;

            if( (i-j+1)==count){
                if(min>badElement){
                    min = badElement;
                }
                if(arr[j]>k) badElement--;
                j++;
            }
        }

        return min;
    }
    public static void main(String[] args){
        int arr[] = {20,12,17};
        int k = 6;
        System.out.println(Solution(arr,k));
    }
}
