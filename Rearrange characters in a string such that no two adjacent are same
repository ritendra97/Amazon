//Rearrange characters in a string such that no two adjacent are same

import java.util.Comparator;
import java.util.PriorityQueue;

class key {
	char c;
	int freq;

	public key(char c, int freq) {
		this.c = c;
		this.freq = freq;
	}
}

public class BinaryTree {

	public static void rearrangeString(String str) {
		
		PriorityQueue<key> pq = new PriorityQueue<>(new Comparator<key>() {
			@Override
			public int compare(key o1, key o2) {
				return o2.freq - o1.freq;
			}
		});

		int count[] = new int[26];

		
		for (int i = 0; i < str.length(); i++) {
			count[str.charAt(i) - 'a']++;
		}
		
		for (int i = 0; i < str.length(); i++) {
			
			if(count[str.charAt(i) - 'a']>str.length()/2) {
				System.out.print("It's not possible");
				return;
			}
		}
		
		for (int i = 0; i <26; i++) {
			
			if(count[i]>0) {
				Character c =(char)(i+'a');
				
				pq.add(new key(c, count[i]));
			}
			
		}

		key prev = new key('#', -1);
		String ans = "";
		while (pq.size() > 0) {

			key ea = pq.poll();
			ans += ea.c;

			if (prev.freq > 0) {
				pq.add(prev);
			}
			if (ea.freq > 0)
				ea.freq--;
			prev = ea;
		}

		System.out.println(ans);
	}

	public static void main(String args[]) {
		String str = "aaaac";
		rearrangeString(str);
	}
}
