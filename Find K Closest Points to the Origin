import java.util.Comparator;
import java.util.PriorityQueue;

class point{
    int val;
    int x, y;

    public point(int val, int x, int y) {
        this.val = val;
        this.x = x;
        this.y = y;
    }

    public point() {
    }
}

public class Graph {

	public static void Solve(int arr[][], int k) {

		PriorityQueue<point> pq = new PriorityQueue<>(new Comparator<point>(){
			
			public int compare(point p1, point p2) {
				return p2.val-p1.val;
			}
			
		}) ;

		for (int i = 0; i < arr.length; i++) {
			int val = ((arr[i][0]) * (arr[i][0]) + (arr[i][1]) * (arr[i][1]));
			point p = new point();
			p.val = val;
			p.x = arr[i][0];
			p.y = arr[i][1];

			if (pq.size() < k) {
				pq.add(p);
			} else {
				if (pq.peek().val > val) {
					pq.remove();
					pq.add(p);
				}
			}
		}

		while (!pq.isEmpty()) {
			point p = pq.remove();
			System.out.println(p.x + " " + p.y);
		}
	}

	public static void main(String[] args) {

		int arr[][] = { { 3, 3 }, { 5, -1 }, { -2, 4 } };
		Solve(arr, 2);
	}
}
