import java.util.Arrays;
import java.util.HashMap;

public class Main4 {

    public static void Solve(int arr[]){
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i = 0;i<arr.length;i++){
            map.put(arr[i], map.getOrDefault(arr[i],0)+1);
        }

        int max = 0;
        for(int i = 0;i< arr.length;i++){
            for(int j = i+1;j<arr.length;j++){
                if( arr[i]>arr[j] &&  map.get(arr[i])>map.get(arr[j])){
                    max = Math.max(max,map.get(arr[i])-map.get(arr[j]));
                }
            }
        }
        System.out.println(max);
    }

    public static void main(String[] args){
        int arr[] = { 3, 1, 3, 2, 3, 2 };
        Solve(arr);
    }
}

import java.util.Arrays;
import java.util.HashMap;

public class Main4 {

    public static int Solve(int arr[]){

        int n = arr.length;
        int []dist = new int[n];
        int j = 0;
        HashMap<Integer,Integer> freq = new HashMap<>();
        for(int i = 0;i<arr.length;i++){
            dist[j++] = arr[i];
            if (!freq.containsKey(arr[i]))
                freq.put(arr[i], 1);
            else
                freq.put(arr[i], freq.get(arr[i]) + 1);
        }

        Arrays.sort(dist);

        int min_freq = n + 1;
        int ans = 0;
        
        for (int i = 0; i < j; i++)
        {
            int cur_freq = freq.get(dist[i]);
            ans = Math.max(ans, cur_freq - min_freq);
            min_freq = Math.min(min_freq, cur_freq);
        }

        return ans;
    }

    public static void main(String[] args){
        int arr[] = { 3, 1, 3, 2, 3, 2 };
        Solve(arr);
    }
}


























