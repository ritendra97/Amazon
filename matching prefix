
Time Complexity: O( N^2 * L^2 )
Space Complexity: O(1)
    
import java.util.ArrayList;
public class Solution {

    public static String matchingPrefix(int N, ArrayList < String > arr) {
        
        int minCost = Integer.MAX_VALUE;
        String ans = new String();

        for (int i = 0; i < N; i++) {

            for (int j = 0; j < arr.get(i).length(); j++) {
                int curCost = 0;
                int len = j + 1;
                String prefixStr = arr.get(i).substring(0, len);
            
                for (int k = 0; k < N; k++) {
                    curCost += arr.get(k).length();
                    if (arr.get(k).length() >= len) {
                        String newStr = arr.get(k).substring(0, len);
                        if (newStr.equals(prefixStr)) {
                            curCost -= len;
                        }
                    }
                }
                if (curCost < minCost) {
                    minCost = curCost;
                    ans = prefixStr;
               }

                if (curCost == minCost) {
                    if (ans.compareTo(prefixStr) > 0) ans = prefixStr;
                }

            }
        }
        return ans;
    }
}


import java.util.HashMap;
import java.util.Stack;

public class Main4 {

    public static void Solution(String[] arr){
        HashMap<String ,Integer> map = new HashMap<>();

        int cost = 0;
        for (int i = 0;i< arr.length;i++){
            cost+=arr[i].length();
            String prefix = "";
            for(int j = 0;j<arr[i].length();j++){
                prefix+=arr[i].charAt(j);
                if(!map.containsKey(prefix)){
                    map.put(prefix,0);
                }
                map.put(prefix,map.get(prefix)+1);
            }
        }

        int min_length = Integer.MAX_VALUE;
        for(String key : map.keySet()){

            int len = key.length();
            int expected = len*map.get(key);
            if(min_length>cost-expected){
                min_length = cost-expected;
            }
        }
        System.out.println(min_length);
    }
    public static void main(String[] args){
        String[] arr = {"co", "code", "studio", "codingninjas", "coding", "debug", "coder", "cipher"};
        Solution(arr);
    }
}
