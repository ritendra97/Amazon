//Maximum Array from Two given Arrays Keeping Order Same

// When Order is not persist.

import java.util.Arrays;
import java.util.Comparator;

class point{
    int val;
    int index;

    public point(int val, int index) {
        this.val = val;
        this.index = index;
    }

    public point() {
        this.val = val;
        this.index = index;
    }
}

public class Main4 {

    public static void Solve(int arr1[] , int arr2[]){

        Arrays.sort(arr1);
        Arrays.sort(arr2);

        point p[] = new point[arr1.length];

        int i = arr1.length-1;
        int j = arr2.length-1;
        int k = 0;

        while (true){

            if(k==p.length) break;

            if(arr1[i]>arr2[j]){
                point ev = new point();
                ev.val = arr1[i];
                ev.index=0;
                p[k++] = ev;
                i--;
            }else if(arr1[i]>arr2[j]){
                point ev = new point();
                ev.val = arr1[j];
                ev.index=1;
                p[k++] = ev;
                j--;
            }else{
                i--;
                j--;
            }
        }
        Arrays.sort(p, new Comparator<point>() {
            @Override
            public int compare(point o1, point o2) {
                return o1.index-o2.index;
            }
        });

        for (point a:p){
            System.out.println(a.val);
        }
    }
    public static  void main(String[] args){
        int arr1[] = {3,7,9,1,4};
        int arr2[] = {2,8,6,5,3};
        Solve(arr1,arr2);
    }
}

// When Order Preserve

import java.util.Arrays;
import java.util.HashMap;

public class Graph {

	public static void Solve(int arr1[] , int arr2[]){

        HashMap<Integer,Integer> map = new HashMap<>();
        int n = arr1.length;
        int i = n-1;
        int j = n-1;
        int temp1[] = new int[n];
        int temp2[] = new int[n];
        
        for(int k = 0;k<n;k++) {
        	temp1[k] = arr1[k];
        	temp2[k] = arr2[k];
        }
        
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        
        int output[] = new int[n];

        while (map.size()<n){

            if (arr1[i] >= arr2[j])
            {
                if(map.containsKey(arr1[i]))
                {
                    map.put(arr1[i], map.get(arr1[i])+1);
                    i--;
                }
                else
                {
                    map.put(arr1[i],1);
                    i--;
                }
            }
            else
            {
                if(map.containsKey(arr2[j]))
                {
                    map.put(arr2[j], map.get(arr2[j])+1);
                    j--;
                }
                else
                {
                    map.put(arr2[j],1);
                    j--;
                }
            }
        }

        int l=0;
        for(int k=0;k<n;k++){
            if(map.containsKey(temp1[k]) && map.get(temp1[k])==1){
                output[l++] = temp1[k];
            }
        }

        for(int k=0;k<n;k++){
            if(map.containsKey(temp2[k]) && map.get(temp2[k])==1){
                output[l++] = temp2[k];
            }
        }
        Arrays.stream(output).forEach(System.out::println);
    }
    public static  void main(String[] args){
        int arr1[] = {3,7,9,1,4};
        int arr2[] = {2,8,6,5,3};
        Solve(arr1,arr2);
    }
}
