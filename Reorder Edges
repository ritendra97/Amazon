import java.util.*;

public class Graph {

	public void addEdge(int u, int v, ArrayList<ArrayList<Integer>> edgeList){
		
		u = Math.abs(u);
		v = Math.abs(v);
        edgeList.get(u).add(v);
        edgeList.get(v).add(-1*u);
    }
    public int reorderEdges(int n, ArrayList<ArrayList<Integer>> edgeList) {
        int ans = dfs(0,-1,edgeList);
        return ans;
    }
    public int dfs(int src, int parent, ArrayList<ArrayList<Integer>> edgeList)
    {
        int count = 0;
        for(int i = 0;i<edgeList.get(src).size();i++)
        {
            int curr_Node = Math.abs(edgeList.get(src).get(i));
            if(curr_Node!=parent)
            {
                count+=dfs(curr_Node,src,edgeList);
                if(edgeList.get(src).get(i)>0)
                {
                    count+=1;
                }
            }
        }
        return count;
    }
    public static void main(String[] args)
    {
    	Graph m = new Graph();
        int arr[][] = {{1,0},
                       {2,0},
                       {1,3},
                       {2,4}};

        ArrayList<ArrayList<Integer>> edgeList = new ArrayList<>();
        for(int i = 0;i<5;i++)
        {
            edgeList.add(i,new ArrayList<>());
        }
        for(int i = 0;i< arr.length;i++)
        {
            m.addEdge(arr[i][0],arr[i][1],edgeList);
        }

        System.out.println(m.reorderEdges(4,edgeList));
    }
}

//Time Complexity O(n)
//Space Complexity O(n)

/*
    Time Complexity: O(N)
    Space Complexity: O(N)

    where 'N' is the total number of nodes in the graph.
*/

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class Solution 
{
    public static int reorderEdges(int n, ArrayList<ArrayList<Integer>> edgeList) 
    {
        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>(n);
        for(int i=0 ; i<n ; i++)
        {
            adjList.add(new ArrayList<>());
        }

        // Build adjacency list graph
        for (int i = 0; i < edgeList.size(); i++) 
        {
            int u = edgeList.get(i).get(0), v = edgeList.get(i).get(1);
    
            /*
                The given edge is u -> v
                So we will directly insert 'v' into the adjacency list of 'u'
            */
            adjList.get(u).add(v);
    
            /*
                We will add a reverse edge v -> u
                To mark this edge as a reverse edge we will insert -'u' into
                the adjacency list of 'v'
            */
            adjList.get(v).add(-1*u);
        }
    
        // To store the count of non-reverse edges
        int count = 0;
    
        Queue<Integer> que = new LinkedList<>();
        boolean[] visited = new boolean[n];
        int currNode;
    
        // Insert node 0 in the queue and mark it as visited
        que.add(0);
        visited[0] = true;
    
        // Run a loop while the queue is not empty:
        while (que.isEmpty() == false) 
        {
            // Store the front element of the queue in 'currNode' and remove it from the queue
            currNode = que.peek();
            que.poll();
    
            // Run a loop for all the edges from 'root'
            for (int i = 0; i < adjList.get(currNode).size(); i++) 
            {
                int nextNode = Math.abs(adjList.get(currNode).get(i));
    
                // If 'nextNode' is not visited
                if (visited[nextNode] == false) 
                {
                    // mark 'nextNode' as visited
                    visited[nextNode] = true;

                    // If the  edge 'currNode' -> 'adjList[currNode][i]' if not a reverse edge
                    if (adjList.get(currNode).get(i) > 0) 
                    {
                        // Increment 'count'
                        count = count + 1;
                    }
    
                    // Insert 'nextNode' in the queue
                    que.add(nextNode);
                }
            }
        }
    
        return count;
	}
}
