//Shortest substring with all characters
// Time Complexity O(n^2);
// Time Complexity O(N);

public class Main3 {

    public static int Solution(int arr[]){

        int i,j;
        int n = arr.length;
        int dp[] = new int[n];
        int maxLength=Integer.MIN_VALUE;

        for (i=0;i< arr.length;i++){

            dp[i] = 1;
            int temp = arr[i];
            boolean checker[] = new boolean[10];

            while (temp>0){
               int digit = temp%10;
               checker[digit] = true;
               temp = temp/10;
            }

            for (j=0;j<i;j++){

                temp = arr[j];
                while (temp>0){
                    int digit = temp%10;
                    if(checker[digit]){
                        dp[i] = Math.max(dp[i],dp[j]+1);
                    }
                    temp=temp/10;
                }
            }
            maxLength = Math.max(maxLength, dp[i]);
        }

        return maxLength;
    }
    public static void main(String[] args){
        int arr[] = {1, 12, 44, 29, 33, 96, 89};
        System.out.println(Solution(arr));
    }
}

// Time Complexity O(n)
// Space Complexity O(n);

//Shortest substring with all characters

public class Main3 {

    public static int Solution(int arr[]){

        int i,j;
        int n = arr.length;
        int dp[][] = new int[n+1][10];
        int maxLength=Integer.MIN_VALUE;

        for (int k = 0;k<10;k++){
            dp[0][k] = 0;
        }

        for(i=1;i<=arr.length;i++){

            boolean checker[] = new boolean[10];
            int temp = arr[i-1];

            while (temp>0){
                int digit = temp%10;
                checker[digit] = true;
                maxLength = Math.max(maxLength,dp[i-1][digit]+1);
                temp/=10;
            }

            for (j=0;j<10;j++){
                if (checker[j])
                {
                    dp[i][j] = maxLength;
                }
                else
                {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        int max_Length = 0;

        for (i = 0; i < 10; i++)
        {
            max_Length = Math.max(max_Length, dp[n][i]);
        }

        return max_Length;
    }
    public static void main(String[] args){
        int arr[] = {1, 12, 44, 29, 33, 96, 89};
        System.out.println(Solution(arr));
    }
}
