//Distance of nearest cell having 1 in a binary matrix

public class Main4 {

    public static void Solution(int arr[][]){

        int ans[][]= new int[arr.length][arr[0].length];

        for (int i = 0; i < ans.length; i++)
            for (int j = 0; j < ans[0].length; j++)
                ans[i][j] = Integer.MAX_VALUE;
            
        for(int i =0;i< arr.length;i++){
            for(int j = 0;j< arr[0].length;j++){


                for(int k = 0;k< arr.length;k++){
                    for(int l = 0;l< arr[0].length;l++){
                        if(arr[k][l]==1){
                            ans[i][j] = Math.min(ans[i][j],Math.abs(i-k)+Math.abs(j-l));
                        }
                    }
                }

            }
        }

        for(int[] row:ans){
            for(int i = 0;i< row.length;i++){
                System.out.print(row[i]+" ");
            }
            System.out.println();
        }

    }

    public static void main(String[] args){

        int arr[][]  = {{0, 0, 0, 1},
                        {0, 0, 1, 1},
                        {0, 1, 1, 0}};

        Solution(arr);
    }
}

//Distance of nearest cell having 1 in a binary matrix


import java.util.Queue;
import java.util.LinkedList;

public class Graph {

	private static void minimumDistance(int[][] matrix) {
		
		int n = matrix.length;
		int m = matrix[0].length;

		int ans[][] = new int[n][m];

		Queue<Coordinate> queue = new LinkedList<>();
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (matrix[i][j] == 1) {
					queue.add(new Coordinate(i, j));
				}
			}
		}
		
		int minDistance = 0;
		
		while (!queue.isEmpty()) {
			
			int size = queue.size();
			
			for (int i = 0; i < size; i++) {
				
				Coordinate curr = queue.poll();
				ans[curr.row][curr.col] = minDistance;
				
				int leftRow = curr.row - 1;
				int leftCol = curr.col;
				
				if ((leftRow >= 0 && leftRow < n) && (leftCol >= 0 && leftCol < m)) {
					if (matrix[leftRow][leftCol] == 0) {
						queue.add(new Coordinate(leftRow, leftCol));
						matrix[leftRow][leftCol] = 1;
					}
				}
				
				int rightRow = curr.row + 1;
				int rightCol = curr.col;
				
				if ((rightRow >= 0 && rightRow < n) && (rightCol >= 0 && rightCol < m)) {
					if (matrix[rightRow][rightCol] == 0) {
						queue.add(new Coordinate(rightRow, rightCol));
						matrix[rightRow][rightCol] = 1;
					}
				}
				
				int upRow = curr.row;
				int upCol = curr.col + 1;
				
				if ((upRow >= 0 && upRow < n) && (upCol >= 0 && upCol < m)) {
					if (matrix[upRow][upCol] == 0) {
						queue.add(new Coordinate(upRow, upCol));
						matrix[upRow][upCol] = 1;
					}
				}
				
				int downRow = curr.row;
				int downCol = curr.col - 1;
				
				if ((downRow >= 0 && downRow < n) && (downCol >= 0 && downCol < m)) {
					if (matrix[downRow][downCol] == 0) {
						queue.add(new Coordinate(downRow, downCol));
						matrix[downRow][downCol] = 1;
					}
				}
			}
			
			minDistance++;
		}
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				System.out.print(ans[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println();
	}

	public static void main(String[] args) {
		
		int matrix1[][] = new int[][] { { 0, 1, 0 }, { 0, 0, 0 }, { 1, 0, 0 } };
		minimumDistance(matrix1);
		
		int matrix2[][] = new int[][] { { 0, 0, 0 }, { 0, 0, 0 }, { 1, 0, 1 } };
		minimumDistance(matrix2);
	}
}

class Coordinate {
	int row;
	int col;

	public Coordinate(int row, int col) {
		this.row = row;
		this.col = col;
	}
}
